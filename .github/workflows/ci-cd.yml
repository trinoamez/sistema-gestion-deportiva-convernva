name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PHP_VERSION: '8.2'
  COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
  # ===== ANÁLISIS DE CÓDIGO =====
  code-quality:
    name: Análisis de Calidad de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, intl, gd, zip, pdo_mysql
        tools: composer:v2
        
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.COMPOSER_CACHE_DIR }}
        key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
          
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
      
    - name: Run PHPStan
      run: vendor/bin/phpstan analyse --configuration=phpstan.neon --no-progress
      
    - name: Run PHP CodeSniffer
      run: vendor/bin/phpcs --standard=phpcs.xml --report=checkstyle --report-file=phpcs-report.xml
      
    - name: Upload PHPCS results
      uses: codecov/codecov-action@v3
      with:
        file: phpcs-report.xml
        flags: phpcs
        name: PHP CodeSniffer Results

  # ===== TESTING =====
  testing:
    name: Testing
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: convernva_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
          
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, intl, gd, zip, pdo_mysql
        tools: composer:v2
        
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.COMPOSER_CACHE_DIR }}
        key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
          
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
      
    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS convernva_test;"
        mysql -h 127.0.0.1 -u root -proot convernva_test < database/schema.sql
        
    - name: Run tests
      run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage
      env:
        DB_HOST: 127.0.0.1
        DB_USER: root
        DB_PASS: root
        DB_NAME: convernva_test
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: unittests
        name: Code coverage
        fail_ci_if_error: false

  # ===== SECURITY SCANNING =====
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        tools: composer:v2
        
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
      
    - name: Run Composer Audit
      run: composer audit --format=json --output=composer-audit.json
      
    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: composer-audit.json

  # ===== BUILD DOCKER =====
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: convernva/sistema-gestion-deportiva
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== DEPLOY TO STAGING =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos de deployment a staging
        # Por ejemplo: SSH al servidor y ejecutar comandos de deployment

  # ===== DEPLOY TO PRODUCTION =====
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security, build-docker]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        # Aquí irían los comandos de deployment a producción
        # Por ejemplo: SSH al servidor y ejecutar comandos de deployment
        
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"
        # Aquí irían las notificaciones (Slack, email, etc.)

  # ===== NOTIFICATIONS =====
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security]
    if: always()
    
    steps:
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: '❌ CI/CD Pipeline failed for ${{ github.repository }}#${{ github.run_number }}'
        
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: '✅ CI/CD Pipeline succeeded for ${{ github.repository }}#${{ github.run_number }}'


